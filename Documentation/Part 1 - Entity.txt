###############
# INTRODUCTION

When creating a game and wanting to organize your code, you kind of run into an issue. There's a LOT of code in making a game that deal with a lot of different stuff from graphics, to AI, physics, UI, etc. XNA doesn't exactly lay out an easy way to organize this stuff, and instead just throws you into a Game class with the main access methods for loading, unloading, updating and drawing.

Are we really expected to put all our code in here?

Of course not. The problem is, the XNA framework doesn't want to lock you into any one given way to organize your code. They instead leave it to you to decide. Crap part is, what if you don't have any idea where to start!? Well that's what this write up is going to jump into.

So lets step back away from all the little parts of games. Forget about sprites and meshes, don't concern yourself with vectors and matrices. Lets organize this into 2 main categories. There's a bunch of code that is very common from game to game... this is the code for actually setting up the framework of a game, any game, independent of gameplay. We can call this the 'engine', with out we can't do shit to make a game. The other stuff is the actual game. It's the part that makes this a game and not just some set of programmatic structures that facilitate rendering graphics.

Engine framework - where all the weird math and rendering and super technical hub-bub goes on.

Game code - code that actually pertains to our gameplay ideas.

The plan here is to create a framework to act as an engine to a group of games. We want to generalize all the necessary code to make a game, this way we can reuse that code over and over for different games. This is what is often called a "Game Engine". XNA isn't a game engine, it's a framework of code for developing against a graphics device with managed code. It doesn't do much to assist in creating an actual game! It expects you to do a lot of that gamework. How do you draw a level, save that level, and then load it in your game? Are we really expected to hand code that stuff? How about saving gameplay? Physics? AI? Where is this stuff??? It's not there... that's a Game Engine. And that's what we want to start laying the foundation for.



###############
# Entity

So the first part we're going to explore is the problem of describing a game as objects. XNA is designed with an object oriented approach, so might as work within that design. So lets consider a game to be a series of interactive scenes. One scene may be a menu, another is the first level in a game, yet another is a cut scene in the game full of exposition about the story.

These scenes are full of things. We're kind of emulating a "world", which is a lot different from most other software where are objects are more ethereal, unnoticed by the user. This on the other hand, it's an entire world of things the user interacts with. So lets organize all those things into a single concept. Now these objects aren't all the same though. We're going to have objects for various things that range in ability. An object to represent a checkpoint, another that is just a rendered background prop, another that is a rendered prop with physics capabilities, another that is the avatar of the player, another that is a mob. These abilities are all unique to an extent, but are often a mix and match of abilities.

One object may be a background prop and just needs a mesh associated with it to render.

Another may be a box you can jump on which requires both a mesh and collider information.

Another, like a checkpoint, may need collider information but no mesh information as its invisible.

Problem is, inheritance doesn't facilitate this nicely. You can't gather these features together easily via inheritance. Furthermore, what if you wanted to turn thse features on or off. Say you have a box with physics attributes attached to it, but you only turn the physics on after some triggered event.

Well, what if we used composition instead of inheritance.

Composition is when you group several objects together and treat them as a single object. Depending on which objects you composite together, you get different functionality ([url=http://en.wikipedia.org/wiki/Composite_pattern]See here for more information on composite pattern[/url]). XNA actually has part of its framework set up to facilitate this pattern for the 'Game' class. In it you can attach GameComponent objects to the Game to extend its functionality. You can add or remove and even disable them as the program runs.

Lets adapt this model. Instead of inheriting from Entity every time we want to describe a new type of object in our scenes, we instead attach various components to it. If we need new functionality, we create a new component and attach it to the object.

(Note - this design will also make serializing our scene easier. We won't get into that now though, that'll be for a later entry in this series)

This design is not of my own, instead its been used in several populare game engines out there. Unity, Unreal, Source and many more use this. The name of the scene object varies from engine to engine; I've seen it called GameObject, Actor, and also the name we're going to give it.

We're going to call this object an 'Entity' and its components 'EntityComponent'.

So lets get into the design of this thing, here is the diagram of our Entity framework:

**INSERT IMAGE HERE entity_framework.png**

So lets breakdown this architecture.

At the heart of it is the [url=https://github.com/lordofduct/dic.xna.framework/blob/master/Dic.Xna.Framework/Src/Entity.cs]Entity[/url] class. This class represents our objects in the scenes of the game. The Entity has as part of it the [url=https://github.com/lordofduct/dic.xna.framework/blob/master/Dic.Xna.Framework/Src/EntityComponentCollection.cs]EntityComponentCollection[/url].

The EntityComponentCollection is where we attach all components to the entity. Unlike the Xna framework these entities are attached by type and only one component of any given type can be attached to the entity. To be honest with you, I can't give a straight answer as to why. There's several conveniences this allows for (both in serializing and in type safety), but there are also downsides as well, in the end though there's nothign screaming at me WHY it's so. All I can say is that every game engine I've seen with this design implements it in this way.

Our EntityComponentCollection you may notice is not typed to a specific class, but instead to the interface [url=https://github.com/lordofduct/dic.xna.framework/blob/master/Dic.Xna.Framework/Src/IEntityComponent.cs]IEntityComponent[/url]. There is an abstract implementation of this interface called simply [url=https://github.com/lordofduct/dic.xna.framework/blob/master/Dic.Xna.Framework/Src/EntityComponent.cs]EntityComponent[/url]. Every time I've used this design in different engines, in a language that supports interfaces, I've always found myself creating my own 'IComponent' interface of some sort so I can then create interfaces that can attach the 'IComponent' contract to them. It only ends up acting as a contract and doesn't integrate into the actual framework though, which means if I want to access the components by interface type I'd end up implementing my own tools for doing so. Here, all I've done was integrate it into the framework. If you don't concern yourself with interfaces, you can ignore this. But for those of you like me who like creating contracts out of interfaces, here is the base of that contract structure. A warning should be made though... EntityComponent as an abstract class performs a bit of leg work for you when inheriting from it. You should NEVER use 'IEntityComponent' and implement it directly, always inherit from 'EntityComponent'. The interface is merely there for designing contract structures.

I've included some basic EntityComponents by default to be part of the structure. One very important one is the [url=https://github.com/lordofduct/dic.xna.framework/blob/master/Dic.Xna.Framework/Src/Transform.cs]Transform[/url] component which ALL entities have by default and even has a property on the Entity class to access it directly. This class facilitates positioning the entity in your scene... all entities should be positionable, hence why I've made it a default component of all entities.

Now because Entities are objects updated in the main game loop, and also we need a place where the entities are referenced for use in game, I created a GameComponent to facilitate all of this. [url=https://github.com/lordofduct/dic.xna.framework/blob/master/Dic.Xna.Framework/Src/EntityManagerComponent.cs]EntityManagerComponent[/url] should be added to your Game object at start up (along with any other GameComponents you want to add). From here you create new entities and access entities that already exist. This GameComponent will do all the leg work for initializing and updating the entities and their components in game.

Speaking of initializing... that'll be the first of our in depth break down of this structure.